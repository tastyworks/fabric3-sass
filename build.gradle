/**
 * Build for Fabric3 Sass plugin.
 *
 * By default, deploy project binaries, Javadoc and sources will be installed in the local Maven repo. To only build binaries and skip generating Javadoc and
 * source archives, pass the <code>skipSources<code> parameter to Gradle: gradlew -PskipSources
 *
 * To deploy to the Nexus release staging repository, change the version and execute:
 * <code>./gradlew -Pbuild=deploy -Dcom.sun.net.ssl.rsaPreMasterSecretFix=true</code>
 * after a full build has been run. Note the 'rsaPreMasterSecretFix' parameter is required as a workaround for this JDK bug:
 * https://bugs.openjdk.java.net/browse/JDK-8030806
 *
 * Note the 'uploadArchives' tasks requires a gradle.properties file to be present containing private key information and authentication parameters
 * (sonatypeUsername and sonatypePassword).
 *
 * To publish the plugin to the Gradle plugin repository, run the 'publishPlugins' task.
 */
project.description = 'tastyworks Gradle Sass plugin'

if (hasProperty('build')) {
    ext.build = project['build']
} else {
    ext.build = 'default';
}
if (ext.build == 'deploy') {
    defaultTasks 'uploadArchives'
} else {
    defaultTasks 'clean', 'assemble'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

def distributions() {
    // define projects that are distributions, i.e. they contain source files; project parent directories will be ignored
    return subprojects.findAll { new File(it.projectDir, "src").exists() }
}

configure(distributions()) {
    group = group
    version = version

    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation gradleApi()
        testImplementation 'junit:junit:4.5'
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives jar
    }

    def isSnapshotVersion = version.endsWith('SNAPSHOT');
    def releasesMavenUrl = 's3://maven.tastyworks.com/releases'
    def snapshotsMavenUrl = 's3://maven.tastyworks.com/snapshots'
    def repositoryUrl = isSnapshotVersion ? snapshotsMavenUrl : releasesMavenUrl
    uploadArchives {
        repositories {
            maven {
                url repositoryUrl
                credentials(AwsCredentials) {
                    accessKey AWS_MAVEN_PUBLISH_KEY_ID
                    secretKey AWS_MAVEN_PUBLISH_SECRET_KEY
                }
            }

        }
    }
}
